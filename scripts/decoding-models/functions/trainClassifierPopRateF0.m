function [trainedClassifier, validationAccuracy, validationPredictions] = ...
	trainClassifierPopRateF0(trainingData, instrument)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% Returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double representing the validation accuracy as
%       a percentage. In the app, the Models pane displays the validation
%       accuracy for each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   [yfit,scores] = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 2025-06-03_042730


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictors = inputTable(:, 1:end-1);
response = inputTable.Response;

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
if strcmp(instrument, 'Bassoon')
	template = templateSVM(...
		'KernelFunction', 'gaussian', ...
		'PolynomialOrder', [], ...
		'KernelScale', 993.354569375432, ...
		'BoxConstraint', 0.0474703580635774, ...
		'Standardize', false);
	predictorNames = {'data_mat1', 'data_mat2', 'data_mat3', 'data_mat4', 'data_mat5', 'data_mat6', 'data_mat7', 'data_mat8', 'data_mat9', 'data_mat10', 'data_mat11', 'data_mat12', 'data_mat13', 'data_mat14', 'data_mat15', 'data_mat16', 'data_mat17', 'data_mat18', 'data_mat19', 'data_mat20', 'data_mat21', 'data_mat22', 'data_mat23', 'data_mat24', 'data_mat25', 'data_mat26', 'data_mat27', 'data_mat28', 'data_mat29', 'data_mat30', 'data_mat31', 'data_mat32', 'data_mat33', 'data_mat34', 'data_mat35', 'data_mat36', 'data_mat37', 'data_mat38', 'data_mat39', 'data_mat40', 'data_mat41', 'data_mat42', 'data_mat43', 'data_mat44', 'data_mat45', 'data_mat46', 'data_mat47', 'data_mat48', 'data_mat49', 'data_mat50', 'data_mat51', 'data_mat52', 'data_mat53', 'data_mat54', 'data_mat55', 'data_mat56', 'data_mat57', 'data_mat58', 'data_mat59', 'data_mat60', 'data_mat61', 'data_mat62', 'data_mat63', 'data_mat64', 'data_mat65', 'data_mat66', 'data_mat67', 'data_mat68', 'data_mat69', 'data_mat70', 'data_mat71', 'data_mat72', 'data_mat73', 'data_mat74', 'data_mat75', 'data_mat76', 'data_mat77', 'data_mat78', 'data_mat79', 'data_mat80', 'data_mat81', 'data_mat82', 'data_mat83', 'data_mat84', 'data_mat85', 'data_mat86', 'data_mat87', 'data_mat88', 'data_mat89', 'data_mat90', 'data_mat91', 'data_mat92', 'data_mat93', 'data_mat94', 'data_mat95', 'data_mat96', 'data_mat97', 'data_mat98', 'data_mat99', 'data_mat100', 'data_mat101', 'data_mat102', 'data_mat103', 'data_mat104', 'data_mat105', 'data_mat106', 'data_mat107', 'data_mat108', 'data_mat109', 'data_mat110', 'data_mat111', 'data_mat112', 'data_mat113', 'data_mat114', 'data_mat115', 'data_mat116', 'data_mat117', 'data_mat118', 'data_mat119', 'data_mat120', 'data_mat121', 'data_mat122', 'data_mat123', 'data_mat124', 'data_mat125', 'data_mat126', 'data_mat127', 'data_mat128', 'data_mat129', 'data_mat130', 'data_mat131', 'data_mat132', 'data_mat133', 'data_mat134', 'data_mat135', 'data_mat136', 'data_mat137', 'data_mat138', 'data_mat139', 'data_mat140', 'data_mat141', 'data_mat142', 'data_mat143', 'data_mat144', 'data_mat145', 'data_mat146', 'data_mat147', 'data_mat148', 'data_mat149', 'data_mat150', 'data_mat151', 'data_mat152', 'data_mat153', 'data_mat154', 'data_mat155', 'data_mat156', 'data_mat157', 'data_mat158', 'data_mat159', 'data_mat160', 'data_mat161', 'data_mat162', 'data_mat163', 'data_mat164', 'data_mat165', 'data_mat166', 'data_mat167', 'data_mat168', 'data_mat169', 'data_mat170', 'data_mat171', 'data_mat172', 'data_mat173', 'data_mat174', 'data_mat175', 'data_mat176', 'data_mat177', 'data_mat178', 'data_mat179', 'data_mat180', 'data_mat181', 'data_mat182', 'data_mat183', 'data_mat184', 'data_mat185', 'data_mat186', 'data_mat187', 'data_mat188', 'data_mat189', 'data_mat190', 'data_mat191', 'data_mat192', 'data_mat193', 'data_mat194', 'data_mat195', 'data_mat196', 'data_mat197', 'data_mat198', 'data_mat199', 'data_mat200', 'data_mat201', 'data_mat202', 'data_mat203'};
elseif strcmp(instrument, 'Oboe')
	template = templateSVM(...
		'KernelFunction', 'gaussian', ...
		'PolynomialOrder', [], ...
		'KernelScale', 994.1679990352178, ...
		'BoxConstraint', 1.526575074825504, ...
		'Standardize', false);
	predictorNames = {'data_mat1', 'data_mat2', 'data_mat3', 'data_mat4', 'data_mat5', 'data_mat6', 'data_mat7', 'data_mat8', 'data_mat9', 'data_mat10', 'data_mat11', 'data_mat12', 'data_mat13', 'data_mat14', 'data_mat15', 'data_mat16', 'data_mat17', 'data_mat18', 'data_mat19', 'data_mat20', 'data_mat21', 'data_mat22', 'data_mat23', 'data_mat24', 'data_mat25', 'data_mat26', 'data_mat27', 'data_mat28', 'data_mat29', 'data_mat30', 'data_mat31', 'data_mat32', 'data_mat33', 'data_mat34', 'data_mat35', 'data_mat36', 'data_mat37', 'data_mat38', 'data_mat39', 'data_mat40', 'data_mat41', 'data_mat42', 'data_mat43', 'data_mat44', 'data_mat45', 'data_mat46', 'data_mat47', 'data_mat48', 'data_mat49', 'data_mat50', 'data_mat51', 'data_mat52', 'data_mat53', 'data_mat54', 'data_mat55', 'data_mat56', 'data_mat57', 'data_mat58', 'data_mat59', 'data_mat60', 'data_mat61', 'data_mat62', 'data_mat63', 'data_mat64', 'data_mat65', 'data_mat66', 'data_mat67', 'data_mat68', 'data_mat69', 'data_mat70', 'data_mat71', 'data_mat72', 'data_mat73', 'data_mat74', 'data_mat75', 'data_mat76', 'data_mat77', 'data_mat78', 'data_mat79', 'data_mat80', 'data_mat81', 'data_mat82', 'data_mat83', 'data_mat84', 'data_mat85', 'data_mat86', 'data_mat87', 'data_mat88', 'data_mat89', 'data_mat90', 'data_mat91', 'data_mat92', 'data_mat93', 'data_mat94', 'data_mat95', 'data_mat96', 'data_mat97', 'data_mat98', 'data_mat99', 'data_mat100', 'data_mat101', 'data_mat102', 'data_mat103', 'data_mat104', 'data_mat105', 'data_mat106', 'data_mat107', 'data_mat108', 'data_mat109', 'data_mat110', 'data_mat111', 'data_mat112', 'data_mat113', 'data_mat114', 'data_mat115', 'data_mat116', 'data_mat117', 'data_mat118', 'data_mat119', 'data_mat120', 'data_mat121', 'data_mat122', 'data_mat123', 'data_mat124', 'data_mat125', 'data_mat126', 'data_mat127', 'data_mat128', 'data_mat129', 'data_mat130', 'data_mat131', 'data_mat132', 'data_mat133', 'data_mat134', 'data_mat135', 'data_mat136', 'data_mat137', 'data_mat138', 'data_mat139', 'data_mat140', 'data_mat141', 'data_mat142', 'data_mat143', 'data_mat144', 'data_mat145', 'data_mat146', 'data_mat147', 'data_mat148', 'data_mat149', 'data_mat150', 'data_mat151', 'data_mat152', 'data_mat153', 'data_mat154', 'data_mat155', 'data_mat156', 'data_mat157', 'data_mat158', 'data_mat159', 'data_mat160', 'data_mat161', 'data_mat162', 'data_mat163', 'data_mat164', 'data_mat165', 'data_mat166', 'data_mat167', 'data_mat168', 'data_mat169', 'data_mat170', 'data_mat171', 'data_mat172', 'data_mat173', 'data_mat174', 'data_mat175', 'data_mat176', 'data_mat177', 'data_mat178', 'data_mat179', 'data_mat180', 'data_mat181', 'data_mat182', 'data_mat183'};
else
	template = templateSVM(...
		'KernelFunction', 'gaussian', ...
		'PolynomialOrder', [], ...
		'KernelScale', 993.354569375432, ...
		'BoxConstraint', 0.0474703580635774, ...
		'Standardize', false);
	predictorNames = {'data_mat1', 'data_mat2', 'data_mat3', 'data_mat4', 'data_mat5', 'data_mat6', 'data_mat7', 'data_mat8', 'data_mat9', 'data_mat10', 'data_mat11', 'data_mat12', 'data_mat13', 'data_mat14', 'data_mat15', 'data_mat16', 'data_mat17', 'data_mat18', 'data_mat19', 'data_mat20', 'data_mat21', 'data_mat22', 'data_mat23', 'data_mat24', 'data_mat25', 'data_mat26', 'data_mat27', 'data_mat28', 'data_mat29', 'data_mat30', 'data_mat31', 'data_mat32', 'data_mat33', 'data_mat34', 'data_mat35', 'data_mat36', 'data_mat37', 'data_mat38', 'data_mat39', 'data_mat40', 'data_mat41', 'data_mat42', 'data_mat43', 'data_mat44', 'data_mat45', 'data_mat46', 'data_mat47', 'data_mat48', 'data_mat49', 'data_mat50', 'data_mat51', 'data_mat52', 'data_mat53', 'data_mat54', 'data_mat55', 'data_mat56', 'data_mat57', 'data_mat58', 'data_mat59', 'data_mat60', 'data_mat61', 'data_mat62', 'data_mat63', 'data_mat64', 'data_mat65', 'data_mat66', 'data_mat67', 'data_mat68', 'data_mat69', 'data_mat70', 'data_mat71', 'data_mat72', 'data_mat73', 'data_mat74', 'data_mat75', 'data_mat76', 'data_mat77', 'data_mat78', 'data_mat79', 'data_mat80', 'data_mat81', 'data_mat82', 'data_mat83', 'data_mat84', 'data_mat85', 'data_mat86', 'data_mat87', 'data_mat88', 'data_mat89', 'data_mat90', 'data_mat91', 'data_mat92', 'data_mat93', 'data_mat94', 'data_mat95', 'data_mat96', 'data_mat97', 'data_mat98', 'data_mat99', 'data_mat100', 'data_mat101', 'data_mat102', 'data_mat103', 'data_mat104', 'data_mat105', 'data_mat106', 'data_mat107', 'data_mat108', 'data_mat109', 'data_mat110', 'data_mat111', 'data_mat112', 'data_mat113', 'data_mat114', 'data_mat115', 'data_mat116', 'data_mat117', 'data_mat118', 'data_mat119', 'data_mat120', 'data_mat121', 'data_mat122', 'data_mat123', 'data_mat124', 'data_mat125', 'data_mat126', 'data_mat127', 'data_mat128', 'data_mat129', 'data_mat130', 'data_mat131', 'data_mat132', 'data_mat133', 'data_mat134', 'data_mat135', 'data_mat136', 'data_mat137', 'data_mat138', 'data_mat139', 'data_mat140', 'data_mat141', 'data_mat142', 'data_mat143', 'data_mat144', 'data_mat145', 'data_mat146', 'data_mat147', 'data_mat148', 'data_mat149', 'data_mat150', 'data_mat151', 'data_mat152', 'data_mat153', 'data_mat154', 'data_mat155', 'data_mat156', 'data_mat157', 'data_mat158', 'data_mat159', 'data_mat160', 'data_mat161', 'data_mat162', 'data_mat163', 'data_mat164', 'data_mat165', 'data_mat166', 'data_mat167', 'data_mat168', 'data_mat169', 'data_mat170', 'data_mat171', 'data_mat172', 'data_mat173', 'data_mat174'};
end
classificationSVM = fitcecoc(...
	predictors, ...
	response, ...
	'Learners', template, ...
	'Coding', 'onevsall');

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
svmPredictFcn = @(x) predict(classificationSVM, x);
trainedClassifier.predictFcn = @(x) svmPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.ClassificationSVM = classificationSVM;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2025a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  [yfit,scores] = c.predictFcn(T) \nreplace ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationSVM, 'KFold', 5);

% Compute validation predictions
[validationPredictions, ~] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
